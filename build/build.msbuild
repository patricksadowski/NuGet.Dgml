<Project DefaultTargets="BuildAndTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="12.0">
  <!-- Settings -->
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
  </PropertyGroup>
  <PropertyGroup>
    <RootDir>$(MSBuildProjectDirectory)\..</RootDir>
    <SolutionName>NuGet.Dgml.sln</SolutionName>
    <SolutionPath>$(RootDir)\$(SolutionName)</SolutionPath>
    <SourceDir>$(RootDir)\src</SourceDir>
    <TestsDir>$(RootDir)\tests</TestsDir>
    <TestResultsDir Condition="'$(TestResultsDir)' == ''">$(TestsDir)\TestResults</TestResultsDir>
    <PackagesDir Condition="'$(PackagesDir)' == ''">$(RootDir)\packages</PackagesDir>
    <ToolsDir Condition="'$(ToolsDir)' == ''">$(RootDir)\tools</ToolsDir>
    <NuGetPath Condition="'$(NuGetPath)' == ''">$(ToolsDir)\nuget.exe</NuGetPath>
    <GitVersionPath Condition="'$(GitVersionPath)' == ''">$(PackagesDir)\GitVersionTask.3.0.2\GitVersionTask.dll</GitVersionPath>
    <xUnitRunnerPath Condition="'$(xUnitRunnerPath)' == ''">$(PackagesDir)\xunit.runner.console.2.1.0\tools\xunit.console.exe</xUnitRunnerPath>
    <OpenCoverPath Condition="'$(OpenCoverPath)' == ''">$(PackagesDir)\OpenCover.4.6.519\tools\OpenCover.Console.exe</OpenCoverPath>
    <ReportGeneratorPath Condition="'$(ReportGeneratorPath)' == ''">$(PackagesDir)\ReportGenerator.2.4.3.0\tools\ReportGenerator.exe</ReportGeneratorPath>
  </PropertyGroup>

  <!-- Targets -->
  <Target Name="Publish" DependsOnTargets="BuildAndTest;CreatePackages" />
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />

  <Target Name="PackageRestore" DependsOnTargets="DownloadNuGet">
    <PropertyGroup>
      <BuildToolsPath>$(MSBuildProjectDirectory)\packages.config</BuildToolsPath>
    </PropertyGroup>
    <Message Text="Restoring build tools..." Importance="High" />
    <Exec Command='"$(NuGetPath)" restore "$(BuildToolsPath)" -NonInteractive -OutputDirectory $(PackagesDir)' />
    <Message Text="Restoring NuGet packages..." Importance="High" />
    <Exec Command='"$(NuGetPath)" restore "$(SolutionPath)" -NonInteractive -OutputDirectory $(PackagesDir)' />
  </Target>

  <Target Name="Build" DependsOnTargets="PackageRestore">
    <Message Text="Building solution..." Importance="High" />
    <MSBuild Projects="$(SolutionPath)" Targets="Rebuild" Properties="Configuration=$(Configuration)"/>
  </Target>

  <Target Name="Test">
    <ItemGroup>
      <TestAssemblies Include="$(TestsDir)\**\bin\$(Configuration)\*.Tests.dll" />
    </ItemGroup>
    <PropertyGroup>
      <xUnitRunnerArgs>@(TestAssemblies->'"%(FullPath)"', ' ') -noshadow -html "$(TestResultsDir)\TestResults.html"</xUnitRunnerArgs>
      <CodeCoveragePath>$(TestResultsDir)\coverage.xml</CodeCoveragePath>
      <OpenCoverFilter>+[NuGet.Dgml*]* -[*.Tests]*</OpenCoverFilter>
      <OpenCoverArgs>-register:user -output:"$(CodeCoveragePath)" -filter:"$(OpenCoverFilter)" -returntargetcode -excludebyattribute:*.ExcludeFromCodeCoverage*;*.GeneratedCode*;*.CompilerGenerated*</OpenCoverArgs>
    </PropertyGroup>
    <Message Text="Testing solution..." Importance="High" />
    <MakeDir Directories="$(TestResultsDir)" />
    <Exec Command='"$(OpenCoverPath)" -target:"$(xUnitRunnerPath)" -targetargs:"$(xUnitRunnerArgs)" $(OpenCoverArgs)' />
    <ReportGenerator ReportFiles="$(CodeCoveragePath)" TargetDirectory="$(TestResultsDir)" ReportTypes="Html;TextSummary" HistoryDirectory="$(TestResultsDir)" VerbosityLevel="Error" />
    <Exec Command='type "$(TestResultsDir)\Summary.txt"' />
  </Target>

  <Target Name="CreatePackages">
    <ItemGroup>
      <NuspecFiles Include="$(SourceDir)\*\*.csproj" />
    </ItemGroup>
    <Message Text="Creating NuGet packages..." Importance="High" />
    <GetVersion SolutionDirectory="$(RootDir)">
      <Output TaskParameter="NuGetVersion" PropertyName="GitVersion_NuGetVersion" />
    </GetVersion>

    <Exec Command='"$(NuGetPath)" pack "%(NuspecFiles.Identity)" -NonInteractive -Properties Configuration=$(Configuration) -Version $(GitVersion_NuGetVersion)' />
  </Target>

  <Target Name="DownloadNuGet" Condition="!Exists('$(NuGetPath)')">
    <PropertyGroup>
      <NuGetDir>$([System.IO.Directory]::GetParent($(NuGetPath)))</NuGetDir>
    </PropertyGroup>
    <Message Text="Downloading NuGet.exe..." Importance="High" />
    <MakeDir Directories="$(NuGetDir)" />
    <DownloadFile FileName="$(NuGetPath)" Address="https://www.nuget.org/nuget.exe" />
  </Target>

  <!-- Tasks -->
  <UsingTask
    AssemblyFile="$(GitVersionPath)"
    TaskName="GitVersionTask.GetVersion"/>

  <UsingTask
    AssemblyFile="$(ReportGeneratorPath)"
    TaskName="ReportGenerator" />

  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <Address ParameterType="System.String" Required="true" />
      <FileName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var directory = System.IO.Path.GetDirectoryName(FileName);
            Directory.CreateDirectory(directory);
            var tempFile = Path.Combine(directory, Path.GetRandomFileName());
            var client = new System.Net.WebClient();
            client.Proxy = System.Net.WebRequest.DefaultWebProxy;
            if (client.Proxy != null) client.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
            var tryCount = 1;
            var maxTries = 3;
            while (tryCount <= maxTries)
            {
                try
                {
                    Log.LogMessage("Attempting to download {0}...", Address);
                    client.DownloadFile(Address, tempFile);
                    break;
                }
                catch (System.Net.WebException e)
                {
                    tryCount++;
                    if (tryCount > maxTries)
                    {
                        throw;
                    }
                    else
                    {
                        Log.LogMessage(MessageImportance.High, "Download failed, retrying: {0}", e.Message);
                    }
                }
            }
            try
            {
                if (!File.Exists(FileName))
                    File.Move(tempFile, FileName);
            }
            finally
            {
                if (File.Exists(tempFile))
                    File.Delete(tempFile);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
