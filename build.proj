<Project DefaultTargets="BuildAndTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="12.0">
  <UsingTask
      AssemblyFile="packages\GitVersionTask.3.0.2\GitVersionTask.dll"
      TaskName="GitVersionTask.GetVersion"/>
  <UsingTask
      AssemblyFile="packages\xunit.runner.msbuild.2.0.0\build\portable-net45+win+wpa81+wp80+monotouch+monoandroid+Xamarin.iOS\xunit.runner.msbuild.dll"
      TaskName="Xunit.Runner.MSBuild.xunit"/>

  <!-- Settings -->
  <PropertyGroup>
    <SolutionName Condition="'$(SolutionName)' == ''">NuGet.Dgml.sln</SolutionName>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <SolutionDir Condition="'$(SolutionDir)' == '' Or '$(SolutionDir)' == '*Undefined*'">$(MSBuildProjectDirectory)</SolutionDir>
    <TestResultsPath Condition="'$(TestResultsPath)' == ''">test\TestResults</TestResultsPath>
    <ToolsPath Condition="'$(ToolsPath)' == ''">$(SolutionDir)\tools</ToolsPath>
    <NuGetExePath Condition="'$(NuGetExePath)' == ''">$(ToolsPath)\nuget.exe</NuGetExePath>
  </PropertyGroup>
  <ItemGroup>
    <NuspecFiles Include="src\*\*.csproj" />
  </ItemGroup>

  <!-- Targets -->
  <Target Name="Publish" DependsOnTargets="BuildAndTest;CreatePackages" />
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />

  <Target Name="PackageRestore" DependsOnTargets="DownloadNuGet">
    <Message Text="Restoring NuGet packages..." Importance="High" />
    <Exec Command='"$(NuGetExePath)" restore "$(SolutionDir)\$(SolutionName)" -NonInteractive' />
  </Target>

  <Target Name="Build" DependsOnTargets="PackageRestore">
    <Message Text="Building solution..." Importance="High" />
    <MSBuild Projects="$(SolutionName)" Targets="Rebuild" Properties="Configuration=$(Configuration)"/>
  </Target>

  <Target Name="Test">
    <Message Text="Testing solution..." Importance="High" />
    <MakeDir Directories="$(TestResultsPath)" />
    <ItemGroup>
      <TestAssemblies Include="test\**\bin\$(Configuration)\*.Test.dll" />
    </ItemGroup>
    <xunit
      Assemblies="@(TestAssemblies)"
      SerializeTestCases="true"
      Xml="$(TestResultsPath)\$(PROCESSOR_ARCHITECTURE).xml"
      Html="$(TestResultsPath)\$(PROCESSOR_ARCHITECTURE).html" />
  </Target>

  <Target Name="CreatePackages">
    <Message Text="Creating NuGet packages..." Importance="High" />
    <GetVersion SolutionDirectory="$(SolutionDir)">
      <Output TaskParameter="NuGetVersion" PropertyName="GitVersion_NuGetVersion" />
    </GetVersion>

    <Exec Command='"$(NuGetExePath)" pack "%(NuspecFiles.Identity)" -NonInteractive -Properties Configuration=$(Configuration) -Version $(GitVersion_NuGetVersion)' />
  </Target>

  <Target Name="DownloadNuGet">
    <MakeDir Directories="$(ToolsPath)" />
    <DownloadFile FileName="$(NuGetExePath)" Address="https://www.nuget.org/nuget.exe" Condition="!Exists('$(NuGetExePath)')" />
  </Target>

  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <Address ParameterType="System.String" Required="true" />
      <FileName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var directory = System.IO.Path.GetDirectoryName(FileName);
            Directory.CreateDirectory(directory);
            var tempFile = Path.Combine(directory, Path.GetRandomFileName());
            var client = new System.Net.WebClient();
            client.Proxy = System.Net.WebRequest.DefaultWebProxy;
            if (client.Proxy != null) client.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
            var tryCount = 1;
            var maxTries = 3;
            while (tryCount <= maxTries)
            {
                try
                {
                    Log.LogMessage("Attempting to download {0}...", Address);
                    client.DownloadFile(Address, tempFile);
                    break;
                }
                catch (System.Net.WebException e)
                {
                    tryCount++;
                    if (tryCount > maxTries)
                    {
                        throw;
                    }
                    else
                    {
                        Log.LogMessage(MessageImportance.High, "Download failed, retrying: {0}", e.Message);
                    }
                }
            }
            try
            {
                if (!File.Exists(FileName))
                    File.Move(tempFile, FileName);
            }
            finally
            {
                if (File.Exists(tempFile))
                    File.Delete(tempFile);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
